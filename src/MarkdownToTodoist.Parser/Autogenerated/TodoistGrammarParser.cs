//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/development/markdown-to-todoist/src/grammar/TodoistGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class TodoistGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, PERCENT=2, DATETIMESEPARATOR=3, HYPHEN=4, COLON=5, INT4=6, INT2=7, 
		NEWLINE=8;
	public const int
		RULE_project = 0, RULE_date = 1;
	public static readonly string[] ruleNames = {
		"project", "date"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'%'", "'T'", "'-'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "PERCENT", "DATETIMESEPARATOR", "HYPHEN", "COLON", "INT4", 
		"INT2", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TodoistGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TodoistGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TodoistGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TodoistGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateContext[] date() {
			return GetRuleContexts<DateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateContext date(int i) {
			return GetRuleContext<DateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(TodoistGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(TodoistGrammarParser.NEWLINE, i);
		}
		public ProjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_project; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITodoistGrammarListener typedListener = listener as ITodoistGrammarListener;
			if (typedListener != null) typedListener.EnterProject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITodoistGrammarListener typedListener = listener as ITodoistGrammarListener;
			if (typedListener != null) typedListener.ExitProject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoistGrammarVisitor<TResult> typedVisitor = visitor as ITodoistGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProjectContext project() {
		ProjectContext _localctx = new ProjectContext(Context, State);
		EnterRule(_localctx, 0, RULE_project);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4;
				date();
				State = 6;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 5;
					Match(NEWLINE);
					}
				}

				}
				}
				State = 10;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PERCENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(TodoistGrammarParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(TodoistGrammarParser.PERCENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT4() { return GetToken(TodoistGrammarParser.INT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HYPHEN() { return GetTokens(TodoistGrammarParser.HYPHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN(int i) {
			return GetToken(TodoistGrammarParser.HYPHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT2() { return GetTokens(TodoistGrammarParser.INT2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT2(int i) {
			return GetToken(TodoistGrammarParser.INT2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIMESEPARATOR() { return GetToken(TodoistGrammarParser.DATETIMESEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(TodoistGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(TodoistGrammarParser.COLON, i);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITodoistGrammarListener typedListener = listener as ITodoistGrammarListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITodoistGrammarListener typedListener = listener as ITodoistGrammarListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoistGrammarVisitor<TResult> typedVisitor = visitor as ITodoistGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 2, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			Match(PERCENT);
			State = 13;
			Match(INT4);
			State = 14;
			Match(HYPHEN);
			State = 15;
			Match(INT2);
			State = 16;
			Match(HYPHEN);
			State = 17;
			Match(INT2);
			State = 18;
			Match(DATETIMESEPARATOR);
			State = 19;
			Match(INT2);
			State = 20;
			Match(COLON);
			State = 21;
			Match(INT2);
			State = 22;
			Match(COLON);
			State = 23;
			Match(INT2);
			State = 24;
			Match(PERCENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '\x1D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\t', '\n', '\x2', 
		'\x6', '\x2', '\v', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\f', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x2', 
		'\x2', '\x4', '\x2', '\x4', '\x2', '\x2', '\x2', '\x1C', '\x2', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\b', '\x5', '\x4', '\x3', '\x2', '\a', '\t', '\a', '\n', '\x2', 
		'\x2', '\b', '\a', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\v', '\x3', '\x2', '\x2', '\x2', '\n', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\f', '\x3', '\x2', '\x2', '\x2', '\f', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\a', '\x4', '\x2', '\x2', 
		'\xF', '\x10', '\a', '\b', '\x2', '\x2', '\x10', '\x11', '\a', '\x6', 
		'\x2', '\x2', '\x11', '\x12', '\a', '\t', '\x2', '\x2', '\x12', '\x13', 
		'\a', '\x6', '\x2', '\x2', '\x13', '\x14', '\a', '\t', '\x2', '\x2', '\x14', 
		'\x15', '\a', '\x5', '\x2', '\x2', '\x15', '\x16', '\a', '\t', '\x2', 
		'\x2', '\x16', '\x17', '\a', '\a', '\x2', '\x2', '\x17', '\x18', '\a', 
		'\t', '\x2', '\x2', '\x18', '\x19', '\a', '\a', '\x2', '\x2', '\x19', 
		'\x1A', '\a', '\t', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x4', '\x2', 
		'\x2', '\x1B', '\x5', '\x3', '\x2', '\x2', '\x2', '\x4', '\b', '\f',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
